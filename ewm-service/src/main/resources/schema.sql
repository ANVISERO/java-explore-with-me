CREATE TABLE IF NOT EXISTS users
(
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name    VARCHAR(250)                            NOT NULL,
    email   VARCHAR(254)                            NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (user_id),
    CONSTRAINT users_unique_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS categories
(
    category_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name        VARCHAR(50)                             NOT NULL,
    CONSTRAINT pk_categories PRIMARY KEY (category_id),
    CONSTRAINT categories_unique_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS events
(
    event_id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation         VARCHAR(2000)                           NOT NULL,
    category_id        BIGINT,
    confirmed_request  BIGINT,
    created_on         TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    description        VARCHAR(7000)                           NOT NULL,
    event_date         TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    user_id            BIGINT                                  NOT NULL,
    lat                REAL,
    lon                REAL,
    paid               BOOLEAN                                 NOT NULL,
    participant_limit  INTEGER                                 NOT NULL,
    published_on       TIMESTAMP WITHOUT TIME ZONE,
    request_moderation BOOLEAN                                 NOT NULL,
    states             VARCHAR,
    title              VARCHAR(7000)                           NOT NULL,
    views              BIGINT,
    CONSTRAINT pk_events PRIMARY KEY (event_id),
    CONSTRAINT fk_events_on_users FOREIGN KEY (user_id) REFERENCES users (user_id),
    CONSTRAINT fk_events_on_categories FOREIGN KEY (category_id) REFERENCES categories (category_id)
);

CREATE TABLE IF NOT EXISTS requests
(
    request_id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    request_created TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    event           BIGINT                                  NOT NULL,
    requester       BIGINT                                  NOT NULL,
    request_status  VARCHAR                                 NOT NULL,
    CONSTRAINT pk_requests PRIMARY KEY (request_id),
    CONSTRAINT fk_requests_on_users FOREIGN KEY (requester) REFERENCES users (user_id),
    CONSTRAINT fk_requests_on_events FOREIGN KEY (event) REFERENCES events (event_id)
);

CREATE TABLE IF NOT EXISTS compilations
(
    compilation_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title          VARCHAR(50)                             NOT NULL,
    pinned         BOOLEAN                                 NOT NULL,
    CONSTRAINT pk_compilations PRIMARY KEY (compilation_id)
);

CREATE TABLE IF NOT EXISTS compilations_events
(
    compilation_id BIGINT NOT NULL,
    event_id       BIGINT NOT NULL,
    PRIMARY KEY (compilation_id, event_id),
    CONSTRAINT fk_compilations_events_on_compilations FOREIGN KEY (compilation_id) REFERENCES compilations (compilation_id),
    CONSTRAINT fk_compilations_events_on_events FOREIGN KEY (event_id) REFERENCES events (event_id)
);

CREATE TABLE IF NOT EXISTS comments
(
    comment_id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    comment_created TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    text            VARCHAR(7000)                           NOT NULL,
    status          VARCHAR(50)                             NOT NULL,
    user_id         BIGINT,
    event_id        BIGINT,
    CONSTRAINT pk_comments PRIMARY KEY (comment_id),
    CONSTRAINT fk_comments_on_users FOREIGN KEY (user_id) REFERENCES users (user_id),
    CONSTRAINT fk_comments_on_events FOREIGN KEY (event_id) REFERENCES events (event_id)
);

CREATE INDEX IF NOT EXISTS events_user_id_idx on events (user_id);
CREATE INDEX IF NOT EXISTS events_category_id_idx on events (category_id);
CREATE INDEX IF NOT EXISTS requests_event_id_idx on requests (event);
CREATE INDEX IF NOT EXISTS requests_user_id_idx on requests (requester);
CREATE INDEX IF NOT EXISTS comments_user_id_idx on comments (user_id);
CREATE INDEX IF NOT EXISTS comments_event_id_idx on comments (event_id);